Compass core
##########################

The Compass library is created from two frameworks at the time of writing. The one is the core of the Compass about which would be this section. Another is the Blueprint framework. I'm not going to talk about the Blueprint while it will be deprecated from newer versions of Sass. If you need some toolkit to work with grid and layouts, than I recommend to look at the `Susy <http://susy.oddbird.net/>`_. It's build with the Sass and works nice with Compass.

The Compass core is spliced into six parts.

- CSS3 - how the name suggests it contains mixins to make life with CSS3 easier
- Typography 
- Utilities
- Layout 
- Reset - global reset based on the `Eric Meyer's reset 2.0 <http://meyerweb.com/eric/tools/css/reset/index.html>`_
- Helpers - functions that add new functions to existing in the SassScript

Each one will be dedicated own section where I go through the features that it has. If you need only to find something specific and you don't need comments for it than I recommend the Compass reference at `Compass Reference <http://compass-style.org/reference/compass/>`_.

Easiest way how to start using Compass is to use 

.. code-block:: scss

	@import "compass";

After that you can access everything included in the CSS3, typography and utilities category. 

Reset
*******

All browsers have default styles that are called if the site has not own stylesheet for required element. With one small problem. They have slightly different predefined styles for some elements, so for example the padding for `div` haven't have to be the same. And there are many different places when you need no padding and margins defined. For that most of the developers specify at the begin of the CSS the 'reset' rules.  Because this is often done, Compass has built-in support for it. Just at the begin of Sass code include the reset and it will append the global reset based on the `Eric Meyer's reset 2.0 <http://meyerweb.com/eric/tools/css/reset/index.html>`_. 

.. code-block:: scss

	@import "compass/reset";

If you need specific version only for some elements only include utilities from the reset. Most of the time you will use the global reset, if not than at `Reset Utilities <http://compass-style.org/reference/compass/reset/utilities/>`_ you can find the reference for mixins for more specified reset.

.. code-block:: scss
	
	@import "compass/reset/utilities";

CSS3
******

The CSS3 brings many new features to modern browser. From basic things like border radius through box-shadow to advance effects created with transitions and key-frames. Everything would be great if CSS3 would be completed and all features in it implemented in all browsers the same way. But this is just wish of all web-developers. Truth is that browsers came with their own prefixes for function of CSS3 which has not yet been accepted to the final version or they have their own ideas that they want to make their browser more advance for example.

Every web-developer today must have seen vendor prefixes like -webkit-, -ms-, -mz- and -o-. If you need to create button, that drops shadow, in perfect universe you will write 

.. code-block:: css

    .perfect-button {
        ...
        box-shadow: 2px 2px 5px 4px rgba(42,42,42,0.8);
        ...
    }

But in this world you must write something like

.. code-block:: css
    
	.just-button {
	    ...
	    -webkit-box-shadow: 2px 2px 5px 4px rgba(42,42,42,0.8);
	       -moz-box-shadow: 2px 2px 5px 4px rgba(42,42,42,0.8);
	            box-shadow: 2px 2px 5px 4px rgba(42,42,42,0.8);
	    ...
	}

This is one of the better cases when there not all browsers have their own prefixes. But we need to add two more lines just to secure that it will work in as many browsers as possible. Finally the same example written in Sass using Compass.

.. code-block:: scss

  @import "compass/css3"

  .scss-button {
      ...
      @include box-shadow(rgba(42,42,42,0.8) 2px 2px 5px 4px);
      ...
  }

The import is needed only once so I will not count it. We are again at one line for the box-shadow. The code with vendor prefixes will be generated by mixin defined in Compass. I'm not going to write specifically about mixins defined in the Compass, while they can change through time. For the most updated version visit their site with `Compass CSS3 reference <http://compass-style.org/reference/compass/css3/>`_.

Helpers
**********

The Sass comes with huge library of functions and the Compass helpers section extends it. The full reference of it is at `Compass Helpers <http://compass-style.org/reference/compass/helpers/>`_. I don't think that you would ever need all of them in one project. But few  of them can save a lot work so you will be using them more frequently. 

It can happen that through development of the web application are two groups. One is coding the back-end with all logic and interactions and the second is aimed on the front-end and working on the styles. It can happen that at the deployment changes are made to the paths for the images. If you are using just CSS, you must go through code and change the occurrence of the problems. In helpers there exists function 

.. code-block:: scss
	
	image-url(path, [only-path])

It looks into the `config.rb` file and takes the images_dir value. For example I have image called `smiley.png`, that is saved in the folder `images` in the project.

.. code-block:: scss

	.avatar {
		background: image-url('smiley.png');
		
		&:after {
			content: image-url('smiley.png', true);
		}
	}

.. code-block:: css

	.avatar {
		background: image-url('/images/smiley.png');
	}
	.avatar:after {
		content: "/images/smiley.png";
	}

How can you see there is slightly difference, if you set the second argument to `true`. Than it will omit the `url()` in the output. The similar functions exist for the fonts. Only difference is in the name `font-url`.

Next useful function is for dimensions of the images. If you need to know the dimensions of the image, compass comes with functionality for that. 

.. code-block:: scss

	image-height(image);

	image-width(image);

The image is relative path of the image. Another tool for images is the function 

.. code-block:: scss

	inline-images(image, [mime-type]);

I recommend to use it only for small images, like icons, where it can save the HTTP request, with little larger CSS file.

Utilities
***********

The Compass Utilities brings mixins for some common tasks. There are utility for control what will be in the print version displayed or if you need to fast way to style table that you can use `@import "compass/utilities/tables";` example can be find at `Table utility example <http://compass-style.org/examples/compass/tables/all/>`_.

At last I would like to show you how to work with sprites in the Compass. The reason for using sprites is to save HTTP request and speedup the load of the site. They are most of time used if you have many small icons. Without using sprites every one image must be loaded separately. With sprites it loads all images and that using CSS use only needed.

In our example we have all 3 icons for social networks with dimensions 32x32 pixels saved in the directory `social`. 

.. code-block:: bash

	images/icons/social/fb.png
	images/icons/social/gplus.png
	images/icons/social/tweet.png

I will show you the basic and easiest way how to create sprite. At the top of your Sass file put

.. code-block:: scss

	@import "icons/social/*.png";
	@import all-social-sprites;

It will generate

.. code-block:: css

	.social-fb,
	.social-gplus,
	.social-tweet { background: url('/images/icons/social-s34fe0232ab.png') no-repeat; }

	.social-fb { background-position: 0 0; }
	.social-gplus   { background-position: 0 -32px; }
	.social-tweet    { background-position: 0 -64px; }

The numbers in the name of the generated sprite will you get different. If you want to learn more about the generating sprites in the Compass, than read `Tutorial about sprites at Compass <http://compass-style.org/help/tutorials/spriting/>`_.